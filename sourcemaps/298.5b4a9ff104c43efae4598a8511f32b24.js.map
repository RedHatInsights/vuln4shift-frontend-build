{"version":3,"file":"js/298.1651765371795.601125134d340e480891.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/BottomPagination.js","webpack:///./src/Components/SmartComponents/BaseTable.js","webpack:///./src/Components/SmartComponents/BaseToolbar.js","webpack:///./src/Helpers/constants.js","webpack:///./src/Temp/mockAPI.js","webpack:///./src/Store/Actions.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\n\nconst BottomPagination = ({ page, perPage, itemCount }) => {\n  return (\n    <Pagination\n      page={page}\n      itemCount={itemCount}\n      perPage={perPage}\n      variant={PaginationVariant.bottom}\n      ouiaId=\"pagination-bottom\"\n      isDisabled={itemCount === 0}\n    />\n  );\n};\n\nBottomPagination.propTypes = {\n  page: propTypes.number,\n  perPage: propTypes.number,\n  itemCount: propTypes.number,\n};\n\nexport default BottomPagination;\n","import React, { Fragment, useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ExpandableRowContent,\n} from '@patternfly/react-table';\n\nconst BaseTable = ({ columns, rows }) => {\n  const [expandedRows, setExpandedRows] = useState([]);\n\n  const setRowExpanded = (row, isExpanding) =>\n    setExpandedRows((prevExpanded) => {\n      const otherExpandedRows = prevExpanded.filter((r) => r !== row);\n      return isExpanding ? [...otherExpandedRows, row] : otherExpandedRows;\n    });\n\n  const isRowExpanded = (row) => expandedRows.includes(row);\n\n  return (\n    <TableComposable variant=\"compact\">\n      <Thead>\n        <Tr>\n          <Th /> {/* expandible caret column */}\n          {columns.map((column) => (\n            <Th key={column.title} sort={column.sortParam}>\n              {column.title}\n            </Th>\n          ))}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {rows.map((row, rowIndex) => (\n          <Fragment key={rowIndex}>\n            <Tr>\n              <Td\n                expand={{\n                  rowIndex,\n                  isExpanded: isRowExpanded(row.key),\n                  onToggle: () =>\n                    setRowExpanded(row.key, !isRowExpanded(row.key)),\n                }}\n              />\n              {row.cells.map((cell, cellIndex) => (\n                <Td key={cellIndex}>{cell}</Td>\n              ))}\n            </Tr>\n            <Tr isExpanded={isRowExpanded(row.key)}>\n              <Td colspan={100}>\n                <ExpandableRowContent>\n                  {row.expandableContent}\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Fragment>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nBaseTable.propTypes = {\n  columns: propTypes.arrayOf(\n    propTypes.shape({\n      title: propTypes.node.isRequired,\n      sortParam: propTypes.string,\n    })\n  ).isRequired,\n  rows: propTypes.arrayOf(\n    propTypes.shape({\n      key: propTypes.string.isRequired,\n      cells: propTypes.arrayOf(propTypes.node).isRequired,\n      expandableContent: propTypes.node,\n    })\n  ).isRequired,\n};\n\nexport default BaseTable;\n","import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport React from 'react';\n\nconst BaseToolbar = () => {\n  return (\n    <PrimaryToolbar\n      pagination={{\n        isDisabled: false,\n        itemCount: 20,\n        page: 1,\n        perPage: 20,\n        ouiaId: 'pagination-top',\n      }}\n    />\n  );\n};\n\nexport default BaseToolbar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\n\nexport const SEVERITY_OPTIONS = {\n  critical: {\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    isInShieldSet: true,\n  },\n  important: {\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    isInShieldSet: true,\n  },\n  moderate: {\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    isInShieldSet: true,\n  },\n  low: {\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    isInShieldSet: true,\n  },\n  unknown: {\n    label: 'Unknown',\n  },\n};\n\nexport const CVE_LIST_TABLE_COLUMNS = [\n  {\n    title: 'CVE ID',\n    sortParam: 'synopsis',\n  },\n  {\n    title: 'Publish date',\n    sortParam: 'publish_date',\n  },\n  {\n    title: 'Severity',\n    sortParam: 'severity',\n  },\n  {\n    title: 'CVSS base score',\n    sortParam: 'cvss_score',\n  },\n  {\n    title: 'Clusters exposed',\n    sortParam: 'clusters_exposed',\n  },\n  {\n    title: 'Images exposed',\n    sortParam: 'images_exposed',\n  },\n];\n\nexport const CLUSTER_DETAIL_TABLE_COLUMNS = [\n  {\n    title: 'CVE ID',\n    sortParam: 'synopsis',\n  },\n  {\n    title: 'Publish date',\n    sortParam: 'publish_date',\n  },\n  {\n    title: 'Severity',\n    sortParam: 'severity',\n  },\n  {\n    title: 'CVSS base score',\n    sortParam: 'cvss_score',\n  },\n  {\n    title: 'Images exposed',\n    sortParam: 'images_exposed',\n  },\n];\n\nexport const CVE_LIST_TABLE_MAPPER = (row) => ({\n  key: row.synopsis,\n  cells: [\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.synopsis}\n    </Link>,\n    processDate(row.publish_date),\n    <Shield hasLabel impact={row.severity} key={row.synopsis} />,\n    parseCvssScore(row.cvss2_score, row.cvss3_score, true),\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.clusters_exposed}\n    </Link>,\n    row.images_exposed,\n  ],\n  expandableContent: row.description,\n});\n\nexport const CLUSTER_DETAIL_TABLE_MAPPER = (row) => ({\n  key: row.synopsis,\n  cells: [\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.synopsis}\n    </Link>,\n    processDate(row.publish_date),\n    <Shield hasLabel impact={row.severity} key={row.synopsis} />,\n    parseCvssScore(row.cvss2_score, row.cvss3_score, true),\n    row.images_exposed,\n  ],\n  expandableContent: row.description,\n});\n","// This is a temporary file with JSON API mocks.\n// Delete this file along with mockEndpoints/ folder\n// API endpoints have been implemented properly.\n\nimport cves from './mockEndpoints/cves.json';\nimport cveDetails from './mockEndpoints/cveDetails.json';\nimport clusters from './mockEndpoints/clusters.json';\nimport clusterDetails from './mockEndpoints/clusterDetails.json';\nimport exposedClusters from './mockEndpoints/exposedClusters.json';\nimport clusterCves from './mockEndpoints/clusterCves.json';\n\nexport const API_fetchCves = () => {\n  return cves;\n};\n\nexport const API_fetchCveDetails = () => {\n  return cveDetails;\n};\n\nexport const API_fetchClusters = () => {\n  return clusters;\n};\n\nexport const API_fetchClusterDetails = () => {\n  return clusterDetails;\n};\n\nexport const API_fetchExposedClusters = () => {\n  return exposedClusters;\n};\n\nexport const API_fetchClusterCves = () => {\n  return clusterCves;\n};\n","import * as ActionTypes from '../Store/ActionTypes';\nimport {\n  API_fetchCves,\n  API_fetchClusterCves,\n  API_fetchClusterDetails,\n} from '../Temp/mockAPI';\n\nexport const fetchCveListTable = (params) => ({\n  type: ActionTypes.FETCH_CVE_LIST_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => API_fetchCves(params),\n});\n\nexport const fetchClusterDetailTable = (params) => ({\n  type: ActionTypes.FETCH_CLUSTER_DETAIL_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => API_fetchClusterCves(params),\n});\n\nexport const fetchClusterDetails = (params) => ({\n  type: ActionTypes.FETCH_CLUSTER_DETAILS,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => API_fetchClusterDetails(params),\n});\n"],"names":["BottomPagination","page","perPage","itemCount","Pagination","variant","PaginationVariant","ouiaId","isDisabled","propTypes","BaseTable","columns","rows","useState","expandedRows","setExpandedRows","isRowExpanded","row","includes","TableComposable","Thead","Tr","Th","map","column","key","title","sort","sortParam","Tbody","rowIndex","Fragment","Td","expand","isExpanded","onToggle","isExpanding","prevExpanded","otherExpandedRows","filter","r","setRowExpanded","cells","cell","cellIndex","colspan","ExpandableRowContent","expandableContent","isRequired","pagination","SEVERITY_OPTIONS","critical","label","iconColor","textColor","isInShieldSet","important","moderate","low","unknown","CVE_LIST_TABLE_COLUMNS","CLUSTER_DETAIL_TABLE_COLUMNS","CVE_LIST_TABLE_MAPPER","synopsis","Link","to","processDate","publish_date","hasLabel","impact","severity","parseCvssScore","cvss2_score","cvss3_score","clusters_exposed","images_exposed","description","CLUSTER_DETAIL_TABLE_MAPPER","fetchCveListTable","params","type","ActionTypes","meta","timestamp","Date","payload","cves","fetchClusterDetailTable","clusterCves","fetchClusterDetails","clusterDetails"],"sourceRoot":""}