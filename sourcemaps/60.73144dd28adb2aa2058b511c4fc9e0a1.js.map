{"version":3,"file":"js/60.1651575816768.35138304e81e026fc2e0.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/BaseTable.js","webpack:///./src/Store/ActionTypes.js","webpack:///./src/Store/CveListStore.js","webpack:///./src/Store/Actions.js","webpack:///./src/Components/SmartComponents/BaseToolbar.js","webpack:///./src/Components/PresentationalComponents/BottomPagination.js","webpack:///./src/Components/SmartComponents/CveTable.js","webpack:///./src/Temp/mockAPI.js","webpack:///./src/Helpers/constants.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ExpandableRowContent,\n} from '@patternfly/react-table';\n\nconst BaseTable = ({ columns, rows }) => {\n  const [expandedRows, setExpandedRows] = useState([]);\n\n  const setRowExpanded = (row, isExpanding) =>\n    setExpandedRows((prevExpanded) => {\n      const otherExpandedRows = prevExpanded.filter((r) => r !== row);\n      return isExpanding ? [...otherExpandedRows, row] : otherExpandedRows;\n    });\n\n  const isRowExpanded = (row) => expandedRows.includes(row);\n\n  return (\n    <TableComposable variant=\"compact\">\n      <Thead>\n        <Tr>\n          <Th /> {/* expandible caret column */}\n          {columns.map((column) => (\n            <Th key={column.title} sort>\n              {column.title}\n            </Th>\n          ))}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {rows.map((row, rowIndex) => (\n          <Fragment key={rowIndex}>\n            <Tr>\n              <Td\n                expand={{\n                  rowIndex,\n                  isExpanded: isRowExpanded(row.key),\n                  onToggle: () =>\n                    setRowExpanded(row.key, !isRowExpanded(row.key)),\n                }}\n              />\n              {row.cells.map((cell, cellIndex) => (\n                <Td key={cellIndex}>{cell}</Td>\n              ))}\n            </Tr>\n            <Tr isExpanded={isRowExpanded(row.key)}>\n              <Td colspan={100}>\n                <ExpandableRowContent>{row.description}</ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Fragment>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nBaseTable.propTypes = {\n  columns: propTypes.array,\n  rows: propTypes.array,\n};\n\nexport default BaseTable;\n","export const FETCH_CVE_LIST_TABLE = 'FETCH_CVE_LIST_TABLE';\nexport const FETCH_CVE_DETAIL_TABLE = 'FETCH_CVE_DETAIL_TABLE';\nexport const FETCH_CLUSTER_LIST_TABLE = 'FETCH_CLUSTER_LIST_TABLE';\nexport const FETCH_CLUSTER_DETAIL_TABLE = 'FETCH_CLUSTER_DETAIL_TABLE';\n","import * as ActionTypes from '../Store/ActionTypes';\n\nconst inititalState = {\n  limit: 20,\n  offset: 0,\n  data: [],\n};\n\nconst CveListStore = (state = inititalState, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_CVE_LIST_TABLE: {\n      return { ...state, cves: action.payload.data, ...action.payload.meta };\n    }\n  }\n  return state;\n};\n\nexport default CveListStore;\n","import { register } from './index';\nimport * as ActionTypes from '../Store/ActionTypes';\nimport CveListStore from './CveListStore';\nimport { fetchCves } from '../Temp/mockAPI';\n\nregister({ CveListStore });\n\nexport const fetchCveListTable = (params) => ({\n  type: ActionTypes.FETCH_CVE_LIST_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => fetchCves(params),\n});\n","import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport React from 'react';\n\nconst BaseToolbar = () => {\n  return (\n    <PrimaryToolbar\n      pagination={{\n        isDisabled: false,\n        itemCount: 20,\n        page: 1,\n        perPage: 20,\n        ouiaId: 'pagination-top',\n      }}\n    />\n  );\n};\n\nexport default BaseToolbar;\n","import React from 'react';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\n\nconst BottomPagination = () => {\n  return (\n    <Pagination\n      page={1}\n      itemCount={20}\n      perPage={20}\n      variant={PaginationVariant.bottom}\n      ouiaId=\"pagination-bottom\"\n      isDisabled={false}\n    />\n  );\n};\n\nexport default BottomPagination;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport BaseTable from './BaseTable';\nimport {\n  CVE_LIST_TABLE_COLUMNS,\n  CVE_LIST_TABLE_MAPPER,\n} from '../../Helpers/constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCveListTable } from '../../Store/Actions';\nimport BaseToolbar from './BaseToolbar';\nimport BottomPagination from '../PresentationalComponents/BottomPagination';\n\nconst CveTable = () => {\n  const dispatch = useDispatch();\n  const cves = useSelector(({ CveListStore }) => CveListStore.cves);\n\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // API response delay simulation\n    setTimeout(() => setLoading(false), 1000);\n\n    dispatch(fetchCveListTable());\n  }, []);\n\n  return isLoading ? (\n    <SkeletonTable colSize={CVE_LIST_TABLE_COLUMNS.length} rowSize={20} />\n  ) : (\n    <Fragment>\n      <BaseToolbar />\n      <BaseTable\n        columns={CVE_LIST_TABLE_COLUMNS}\n        rows={cves.map((row) => CVE_LIST_TABLE_MAPPER(row))}\n      />\n      <BottomPagination />\n    </Fragment>\n  );\n};\n\nexport default CveTable;\n","// This is a temporary file with JSON API mocks.\n// Delete this file along with mockEndpoints/ folder\n// API endpoints have been implemented properly.\n\nimport CVES from './mockEndpoints/cves.json';\n\nexport const fetchCves = () => {\n  return CVES;\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\n\nexport const SEVERITY_OPTIONS = {\n  critical: {\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    isInShieldSet: true,\n  },\n  important: {\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    isInShieldSet: true,\n  },\n  moderate: {\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    isInShieldSet: true,\n  },\n  low: {\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    isInShieldSet: true,\n  },\n  unknown: {\n    label: 'Unknown',\n  },\n};\n\nexport const CVE_LIST_TABLE_COLUMNS = [\n  {\n    title: 'CVE ID',\n  },\n  {\n    title: 'Publish date',\n  },\n  {\n    title: 'Severity',\n  },\n  {\n    title: 'CVSS base score',\n  },\n  {\n    title: 'Clusters exposed',\n  },\n  {\n    title: 'Images exposed',\n  },\n];\n\nexport const CVE_LIST_TABLE_MAPPER = (row) => ({\n  key: row.synopsis,\n  cells: [\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.synopsis}\n    </Link>,\n    processDate(row.publish_date),\n    <Shield hasLabel impact={row.severity} key={row.synopsis} />,\n    parseCvssScore(row.cvss2_score, row.cvss3_score, true),\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.clusters_exposed}\n    </Link>,\n    row.images_exposed,\n  ],\n  description: row.description,\n});\n"],"names":["BaseTable","columns","rows","useState","expandedRows","setExpandedRows","isRowExpanded","row","includes","TableComposable","variant","Thead","Tr","Th","map","column","key","title","sort","Tbody","rowIndex","Fragment","Td","expand","isExpanded","onToggle","isExpanding","prevExpanded","otherExpandedRows","filter","r","setRowExpanded","cells","cell","cellIndex","colspan","ExpandableRowContent","description","propTypes","FETCH_CVE_LIST_TABLE","inititalState","limit","offset","data","register","CveListStore","state","action","type","ActionTypes","cves","payload","meta","PrimaryToolbar","pagination","isDisabled","itemCount","page","perPage","ouiaId","Pagination","PaginationVariant","dispatch","useDispatch","useSelector","isLoading","setLoading","useEffect","setTimeout","timestamp","Date","CVES","colSize","CVE_LIST_TABLE_COLUMNS","rowSize","CVE_LIST_TABLE_MAPPER","SEVERITY_OPTIONS","critical","label","iconColor","textColor","isInShieldSet","important","moderate","low","unknown","synopsis","Link","to","processDate","publish_date","hasLabel","impact","severity","parseCvssScore","cvss2_score","cvss3_score","clusters_exposed","images_exposed"],"sourceRoot":""}