{"version":3,"file":"js/7187.1655740643013.7f1837613aa5c1df40ff.js","mappings":"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","sources":["webpack:///./src/Components/PresentationalComponents/BottomPagination.js","webpack:///./src/Components/SmartComponents/BaseTable.js","webpack:///./src/Components/SmartComponents/BaseToolbar.js","webpack:///./src/Components/PresentationalComponents/ShieldSet.js","webpack:///./src/Helpers/constants.js","webpack:///./src/Temp/mockAPI.js","webpack:///./src/Store/Actions.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\n\nconst BottomPagination = ({ page, perPage, itemCount }) => {\n  return (\n    <Pagination\n      page={page}\n      itemCount={itemCount}\n      perPage={perPage}\n      variant={PaginationVariant.bottom}\n      ouiaId=\"pagination-bottom\"\n      isDisabled={itemCount === 0}\n    />\n  );\n};\n\nBottomPagination.propTypes = {\n  page: propTypes.number,\n  perPage: propTypes.number,\n  itemCount: propTypes.number,\n};\n\nexport default BottomPagination;\n","import React, { Fragment, useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ExpandableRowContent,\n} from '@patternfly/react-table';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport { TableVariant } from '@patternfly/react-table';\n\nconst BaseTable = ({ isLoading, columns, rows, isExpandable = false }) => {\n  const [expandedRows, setExpandedRows] = useState([]);\n\n  const setRowExpanded = (row, isExpanding) =>\n    setExpandedRows((prevExpanded) => {\n      const otherExpandedRows = prevExpanded.filter((r) => r !== row);\n      return isExpanding ? [...otherExpandedRows, row] : otherExpandedRows;\n    });\n\n  const isRowExpanded = (row) => expandedRows.includes(row);\n\n  return isLoading ? (\n    <SkeletonTable\n      colSize={columns.length}\n      rowSize={20}\n      variant={TableVariant.compact}\n    />\n  ) : (\n    <TableComposable variant={TableVariant.compact}>\n      <Thead>\n        <Tr>\n          {isExpandable && <Th />}\n          {columns.map((column) => (\n            <Th key={column.title} sort={column.sortParam}>\n              {column.title}\n            </Th>\n          ))}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {rows.map((row, rowIndex) => (\n          <Fragment key={rowIndex}>\n            <Tr>\n              {isExpandable && (\n                <Td\n                  expand={{\n                    rowIndex,\n                    isExpanded: isRowExpanded(row.key),\n                    onToggle: () =>\n                      setRowExpanded(row.key, !isRowExpanded(row.key)),\n                  }}\n                />\n              )}\n              {row.cells.map((cell, cellIndex) => (\n                <Td key={cellIndex} dataLabel={columns[cellIndex].title}>\n                  {cell}\n                </Td>\n              ))}\n            </Tr>\n            {isExpandable && (\n              <Tr isExpanded={isRowExpanded(row.key)}>\n                <Td colspan={100}>\n                  <ExpandableRowContent>\n                    {row.expandableContent}\n                  </ExpandableRowContent>\n                </Td>\n              </Tr>\n            )}\n          </Fragment>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nBaseTable.propTypes = {\n  isLoading: propTypes.bool,\n  columns: propTypes.arrayOf(\n    propTypes.shape({\n      title: propTypes.node.isRequired,\n      sortParam: propTypes.string,\n    })\n  ).isRequired,\n  rows: propTypes.arrayOf(\n    propTypes.shape({\n      key: propTypes.string.isRequired,\n      cells: propTypes.arrayOf(propTypes.node).isRequired,\n      expandableContent: propTypes.node,\n    })\n  ).isRequired,\n  isExpandable: propTypes.bool,\n};\n\nexport default BaseTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nconst BaseToolbar = ({ page = 1, perPage = 20, itemCount }) => {\n  return (\n    <PrimaryToolbar\n      pagination={{\n        isDisabled: itemCount === 0,\n        itemCount,\n        page,\n        perPage,\n        ouiaId: 'pagination-top',\n      }}\n    />\n  );\n};\n\nBaseToolbar.propTypes = {\n  page: propTypes.number,\n  perPage: propTypes.number,\n  itemCount: propTypes.number,\n};\n\nexport default BaseToolbar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SEVERITY_OPTIONS } from '../../Helpers/constants';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { Link } from 'react-router-dom';\n\n// TODO: Setup link to navigate to Cluster detail page with severity filter applied\nconst ShieldSet = ({ count, linkTo }) => {\n  const DISABLED_COLOR = 'var(--pf-global--disabled-color--200)';\n\n  return (\n    <div className=\"shield-set\">\n      {Object.entries(SEVERITY_OPTIONS).map(\n        ([severityValue, severityProps]) =>\n          severityProps.isInShieldSet &&\n          (count[severityValue] === 0 ? (\n            <Link key={severityValue} className=\"disabled-shield\">\n              <SecurityIcon style={{ color: DISABLED_COLOR }} />\n              <span>0</span>\n            </Link>\n          ) : (\n            <Link key={severityValue} to={linkTo}>\n              <SecurityIcon style={{ color: severityProps.iconColor }} />\n              <span>{count[severityValue]}</span>\n            </Link>\n          ))\n      )}\n    </div>\n  );\n};\n\nShieldSet.propTypes = {\n  count: PropTypes.shape({\n    critical: PropTypes.number,\n    important: PropTypes.number,\n    moderate: PropTypes.number,\n    low: PropTypes.number,\n  }).isRequired,\n  linkTo: PropTypes.string,\n};\n\nexport default ShieldSet;\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport ShieldSet from '../Components/PresentationalComponents/ShieldSet';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nexport const SEVERITY_OPTIONS = {\n  critical: {\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    isInShieldSet: true,\n  },\n  important: {\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    isInShieldSet: true,\n  },\n  moderate: {\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    isInShieldSet: true,\n  },\n  low: {\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    isInShieldSet: true,\n  },\n  unknown: {\n    label: 'Unknown',\n  },\n};\n\nexport const CVE_LIST_TABLE_COLUMNS = [\n  {\n    title: 'CVE ID',\n    sortParam: 'synopsis',\n  },\n  {\n    title: 'Publish date',\n    sortParam: 'publish_date',\n  },\n  {\n    title: 'Severity',\n    sortParam: 'severity',\n  },\n  {\n    title: 'CVSS base score',\n    sortParam: 'cvss_score',\n  },\n  {\n    title: 'Clusters exposed',\n    sortParam: 'clusters_exposed',\n  },\n  {\n    title: 'Images exposed',\n    sortParam: 'images_exposed',\n  },\n];\n\nexport const CLUSTER_LIST_TABLE_COLUMNS = [\n  {\n    title: 'Name',\n    sortParam: 'display_name',\n  },\n  {\n    title: 'Status',\n  },\n  {\n    title: 'Type',\n  },\n  {\n    title: 'Version',\n  },\n  {\n    title: 'CVEs severity',\n  },\n  {\n    title: 'Provider',\n    sortParam: 'provider',\n  },\n];\n\nexport const CVE_DETAIL_TABLE_COLUMNS = [\n  {\n    title: 'Name',\n    sortParam: 'display_name',\n  },\n  {\n    title: 'Status',\n  },\n  {\n    title: 'Type',\n  },\n  {\n    title: 'Version',\n  },\n  {\n    title: 'Provider',\n    sortParam: 'provider',\n  },\n];\n\nexport const CLUSTER_DETAIL_TABLE_COLUMNS = [\n  {\n    title: 'CVE ID',\n    sortParam: 'synopsis',\n  },\n  {\n    title: 'Publish date',\n    sortParam: 'publish_date',\n  },\n  {\n    title: 'Severity',\n    sortParam: 'severity',\n  },\n  {\n    title: 'CVSS base score',\n    sortParam: 'cvss_score',\n  },\n  {\n    title: 'Images exposed',\n    sortParam: 'images_exposed',\n  },\n];\n\nconst createCveDescription = (row) => (\n  <Fragment>\n    <TextContent>\n      <Text component={TextVariants.h6} style={{ fontSize: 14 }}>\n        CVE description\n      </Text>\n    </TextContent>\n    {row.description}\n    <Link\n      to={'/cves/' + row.synopsis}\n      className=\"pf-u-mt-md pf-u-display-block\"\n    >\n      View more information about this CVE\n    </Link>\n  </Fragment>\n);\n\nexport const CVE_LIST_TABLE_MAPPER = (row) => ({\n  key: row.synopsis,\n  cells: [\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.synopsis}\n    </Link>,\n    processDate(row.publish_date),\n    <Shield hasLabel impact={row.severity} key={row.synopsis} />,\n    parseCvssScore(row.cvss2_score, row.cvss3_score, true),\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.clusters_exposed}\n    </Link>,\n    row.images_exposed,\n  ],\n  expandableContent: createCveDescription(row),\n});\n\nexport const CLUSTER_LIST_TABLE_MAPPER = (row) => ({\n  key: row.id,\n  cells: [\n    <Link to={'/clusters/' + row.id} key={row.id}>\n      {row.display_name}\n    </Link>,\n    row.status_text,\n    row.type,\n    row.version,\n    <ShieldSet\n      key={row.id}\n      count={{ ...row.cves_severity }}\n      linkTo={`/clusters/${row.id}`}\n    />,\n    row.provider,\n  ],\n});\n\nexport const CVE_DETAIL_TABLE_MAPPER = (row) => ({\n  key: row.id,\n  cells: [\n    <Link to={'/clusters/' + row.id} key={row.id}>\n      {row.display_name}\n    </Link>,\n    row.status_text,\n    row.type,\n    row.version,\n    row.provider,\n  ],\n});\n\nexport const CLUSTER_DETAIL_TABLE_MAPPER = (row) => ({\n  key: row.synopsis,\n  cells: [\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.synopsis}\n    </Link>,\n    processDate(row.publish_date),\n    <Shield hasLabel impact={row.severity} key={row.synopsis} />,\n    parseCvssScore(row.cvss2_score, row.cvss3_score, true),\n    row.images_exposed,\n  ],\n  expandableContent: createCveDescription(row),\n});\n","// This is a temporary file with JSON API mocks.\n// Delete this file along with mockEndpoints/ folder\n// API endpoints have been implemented properly.\n\nimport cves from './mockEndpoints/cves.json';\nimport cveDetails from './mockEndpoints/cveDetails.json';\nimport clusters from './mockEndpoints/clusters.json';\nimport clusterDetails from './mockEndpoints/clusterDetails.json';\nimport exposedClusters from './mockEndpoints/exposedClusters.json';\nimport clusterCves from './mockEndpoints/clusterCves.json';\n\nexport const API_fetchCves = () => {\n  return cves;\n};\n\nexport const API_fetchCveDetails = () => {\n  return cveDetails;\n};\n\nexport const API_fetchClusters = () => {\n  return clusters;\n};\n\nexport const API_fetchClusterDetails = () => {\n  return clusterDetails;\n};\n\nexport const API_fetchExposedClusters = () => {\n  return exposedClusters;\n};\n\nexport const API_fetchClusterCves = () => {\n  return clusterCves;\n};\n","import * as ActionTypes from '../Store/ActionTypes';\nimport {\n  API_fetchCves,\n  API_fetchClusters,\n  API_fetchClusterCves,\n  API_fetchClusterDetails,\n  API_fetchExposedClusters,\n  API_fetchCveDetails,\n} from '../Temp/mockAPI';\n\nexport const fetchCveListTable = (params) => ({\n  type: ActionTypes.FETCH_CVE_LIST_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => API_fetchCves(params),\n});\n\nexport const fetchClusterListTable = (params) => ({\n  type: ActionTypes.FETCH_CLUSTER_LIST_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => API_fetchClusters(params),\n});\n\nexport const fetchCveDetailTable = (params) => ({\n  type: ActionTypes.FETCH_CVE_DETAIL_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => API_fetchExposedClusters(params),\n});\n\nexport const fetchCveDetails = (params) => ({\n  type: ActionTypes.FETCH_CVE_DETAILS,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => API_fetchCveDetails(params),\n});\n\nexport const fetchClusterDetailTable = (params) => ({\n  type: ActionTypes.FETCH_CLUSTER_DETAIL_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => API_fetchClusterCves(params),\n});\n\nexport const fetchClusterDetails = (params) => ({\n  type: ActionTypes.FETCH_CLUSTER_DETAILS,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => API_fetchClusterDetails(params),\n});\n"],"names":["BottomPagination","page","perPage","itemCount","Pagination","variant","PaginationVariant","ouiaId","isDisabled","propTypes","BaseTable","isLoading","columns","rows","isExpandable","useState","expandedRows","setExpandedRows","isRowExpanded","row","includes","colSize","length","rowSize","TableVariant","TableComposable","Thead","Tr","Th","map","column","key","title","sort","sortParam","Tbody","rowIndex","Fragment","Td","expand","isExpanded","onToggle","isExpanding","prevExpanded","otherExpandedRows","filter","r","setRowExpanded","cells","cell","cellIndex","dataLabel","colspan","ExpandableRowContent","expandableContent","isRequired","BaseToolbar","pagination","ShieldSet","count","linkTo","className","Object","entries","SEVERITY_OPTIONS","severityValue","severityProps","isInShieldSet","Link","style","color","to","iconColor","PropTypes","critical","important","moderate","low","label","textColor","unknown","CVE_LIST_TABLE_COLUMNS","CLUSTER_LIST_TABLE_COLUMNS","CVE_DETAIL_TABLE_COLUMNS","CLUSTER_DETAIL_TABLE_COLUMNS","createCveDescription","TextContent","Text","component","TextVariants","fontSize","description","synopsis","CVE_LIST_TABLE_MAPPER","processDate","publish_date","Shield","hasLabel","impact","severity","parseCvssScore","cvss2_score","cvss3_score","clusters_exposed","images_exposed","CLUSTER_LIST_TABLE_MAPPER","id","display_name","status_text","type","version","cves_severity","provider","CVE_DETAIL_TABLE_MAPPER","CLUSTER_DETAIL_TABLE_MAPPER","fetchCveListTable","params","ActionTypes","meta","timestamp","Date","payload","cves","fetchClusterListTable","clusters","fetchCveDetailTable","exposedClusters","fetchCveDetails","cveDetails","fetchClusterDetailTable","clusterCves","fetchClusterDetails","clusterDetails"],"sourceRoot":""}