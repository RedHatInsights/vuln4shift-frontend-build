{"version":3,"file":"js/9528.1655366069643.94d648c15fe0246ef2f1.js","mappings":"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","sources":["webpack:///./config/empty.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/Routes.js","webpack:///./src/Store/ActionTypes.js","webpack:///./src/Store/ReducerRegistry.js","webpack:///./src/Store/Reducers/ClusterDetailStore.js","webpack:///./src/Store/Reducers/ClusterListStore.js","webpack:///./src/Store/Reducers/CveDetailStore.js","webpack:///./src/Store/Reducers/CveListStore.js"],"sourcesContent":["// Used as an empty module to save bundle size\nmodule.exports = {};\n","import React, { Fragment, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Routes } from './Routes';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport './App.scss';\n\nconst App = (props) => {\n  const history = useHistory();\n\n  useEffect(() => {\n    insights.chrome.init();\n\n    insights.chrome.identifyApp('ocp-vulnerability');\n\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) =>\n      history.push(`/${event.navId}`)\n    );\n\n    return () => {\n      unregister();\n    };\n  }, []);\n\n  return (\n    <Fragment>\n      <NotificationsPortal />\n      <Routes childProps={props} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './Store/ReducerRegistry';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst AppEntry = () => (\n  <Provider\n    store={init(\n      ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n    ).getStore()}\n  >\n    <Router basename={getBaseName(window.location.pathname, 3)}>\n      <App />\n    </Router>\n  </Provider>\n);\n\nexport default AppEntry;\n","import React, { Suspense, lazy } from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst CveListPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"CveListPage\" */ './Components/SmartComponents/CveList/CveListPage'\n  )\n);\n\nconst ClusterListPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"ClusterListPage\" */ './Components/SmartComponents/ClusterList/ClusterListPage'\n  )\n);\n\nconst CveDetailPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"CveDetailPage\" */ './Components/SmartComponents/CveDetail/CveDetailPage'\n  )\n);\n\nconst ClusterDetailPage = lazy(() =>\n  import(\n    /* webpackChunkName: \"ClusterDetailPage\" */ './Components/SmartComponents/ClusterDetail/ClusterDetailPage'\n  )\n);\n\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <Switch>\n      <Route path=\"/cves/:cveId\" component={CveDetailPage} />\n      <Route path=\"/clusters/:clusterId\" component={ClusterDetailPage} />\n      <Route path=\"/cves\" component={CveListPage} />\n      <Route path=\"/clusters\" component={ClusterListPage} />\n      <Route>\n        <Redirect to=\"/cves\" />\n      </Route>\n    </Switch>\n  </Suspense>\n);\n","export const FETCH_CVE_LIST_TABLE = 'FETCH_CVE_LIST_TABLE';\nexport const FETCH_CVE_DETAIL_TABLE = 'FETCH_CVE_DETAIL_TABLE';\nexport const FETCH_CLUSTER_LIST_TABLE = 'FETCH_CLUSTER_LIST_TABLE';\nexport const FETCH_CLUSTER_DETAIL_TABLE = 'FETCH_CLUSTER_DETAIL_TABLE';\nexport const FETCH_CVE_DETAILS = 'FETCH_CVE_DETAILS';\nexport const FETCH_CLUSTER_DETAILS = 'FETCH_CLUSTER_DETAILS';\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport CveListStore from './Reducers/CveListStore';\nimport ClusterListStore from './Reducers/ClusterListStore';\nimport CveDetailStore from './Reducers/CveDetailStore';\nimport ClusterDetailStore from './Reducers/ClusterDetailStore';\n\nlet registry;\n\nexport function init(...middleware) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n\n  registry.register({ notifications: notificationsReducer });\n\n  registry.register({ CveListStore });\n  registry.register({ ClusterListStore });\n  registry.register({ CveDetailStore });\n  registry.register({ ClusterDetailStore });\n\n  return registry;\n}\n","import * as ActionTypes from '../ActionTypes';\n\nconst initialState = {\n  limit: 20,\n  offset: 0,\n  total_items: 0,\n  cves: [],\n  cluster: {},\n};\n\nconst ClusterDetailStore = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_CLUSTER_DETAIL_TABLE: {\n      return { ...state, cves: action.payload.data, ...action.payload.meta };\n    }\n    case ActionTypes.FETCH_CLUSTER_DETAILS: {\n      return { ...state, cluster: action.payload.data, ...action.payload.meta };\n    }\n  }\n\n  return state;\n};\n\nexport default ClusterDetailStore;\n","import * as ActionTypes from '../ActionTypes';\n\nconst initialState = {\n  limit: 20,\n  offset: 0,\n  total_items: 0,\n  clusters: [],\n};\n\nconst ClusterListStore = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_CLUSTER_LIST_TABLE: {\n      return {\n        ...state,\n        clusters: action.payload.data,\n        ...action.payload.meta,\n      };\n    }\n  }\n\n  return state;\n};\n\nexport default ClusterListStore;\n","import * as ActionTypes from '../ActionTypes';\n\nconst initialState = {\n  limit: 20,\n  offset: 0,\n  total_items: 0,\n  clusters: [],\n  cve: {},\n};\n\nconst CveDetailStore = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_CVE_DETAIL_TABLE: {\n      return {\n        ...state,\n        clusters: action.payload.data,\n        ...action.payload.meta,\n      };\n    }\n    case ActionTypes.FETCH_CVE_DETAILS: {\n      return { ...state, cve: action.payload.data, ...action.payload.meta };\n    }\n  }\n\n  return state;\n};\n\nexport default CveDetailStore;\n","import * as ActionTypes from '../ActionTypes';\n\nconst initialState = {\n  limit: 20,\n  offset: 0,\n  total_items: 0,\n  cves: [],\n};\n\nconst CveListStore = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.FETCH_CVE_LIST_TABLE: {\n      return { ...state, cves: action.payload.data, ...action.payload.meta };\n    }\n  }\n\n  return state;\n};\n\nexport default CveListStore;\n"],"names":["module","exports","props","history","useHistory","useEffect","insights","chrome","init","identifyApp","unregister","on","event","push","navId","Fragment","childProps","store","getStore","basename","getBaseName","window","location","pathname","CveListPage","lazy","ClusterListPage","CveDetailPage","ClusterDetailPage","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","path","component","Redirect","to","FETCH_CVE_LIST_TABLE","FETCH_CVE_DETAIL_TABLE","FETCH_CLUSTER_LIST_TABLE","FETCH_CLUSTER_DETAIL_TABLE","FETCH_CVE_DETAILS","FETCH_CLUSTER_DETAILS","registry","middleware","getRegistry","promiseMiddleware","notificationsMiddleware","errorDescriptionKey","register","notifications","notificationsReducer","CveListStore","ClusterListStore","CveDetailStore","ClusterDetailStore","initialState","limit","offset","total_items","cves","cluster","state","action","type","ActionTypes","payload","data","meta","clusters","cve"],"sourceRoot":""}