{"version":3,"file":"js/ClusterDetailPage.1651589361123.101599e1367e0f7bb760.js","mappings":"0QAWMA,EAAoB,SAAC,GAAc,IAAZC,EAAY,EAAZA,MAC3B,OACE,kBAAC,EAAAC,SAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAAC,WAAD,CAAYC,UAAU,cACpB,kBAAC,EAAAC,eAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,GAAG,KAAT,kBAEF,kBAAC,EAAAF,eAAD,KACE,kBAAC,EAAAC,KAAD,CAAMC,GAAG,aAAT,aAEF,kBAAC,EAAAF,eAAD,kBAEF,kBAAC,IAAD,CAAiBG,MAAM,WAAWJ,UAAU,eAC5C,kBAAC,EAAAF,SAAD,cACSD,EAAMQ,OAAOC,UACpB,6BAFF,qCAMF,kBAAC,IAAD,KACE,kBAAC,IAAD,SAMRV,EAAkBW,UAAY,CAC5BV,MAAOW,IAAAA,QAGT,W,yHC9BMC,EAAY,SAAC,GAAsB,IAApBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAC5B,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAQMC,EAAgB,SAACC,GAAD,OAASH,EAAaI,SAASD,IAErD,OACE,kBAAC,EAAAE,gBAAD,CAAiBC,QAAQ,WACvB,kBAAC,EAAAC,MAAD,KACE,kBAAC,EAAAC,GAAD,KACE,kBAAC,EAAAC,GAAD,MADF,IAEGZ,EAAQa,KAAI,SAACC,GAAD,OACX,kBAAC,EAAAF,GAAD,CAAIG,IAAKD,EAAOpB,MAAOsB,MAAI,GACxBF,EAAOpB,YAKhB,kBAAC,EAAAuB,MAAD,KACGhB,EAAKY,KAAI,SAACP,EAAKY,GAAN,OACR,kBAAC,EAAA9B,SAAD,CAAU2B,IAAKG,GACb,kBAAC,EAAAP,GAAD,KACE,kBAAC,EAAAQ,GAAD,CACEC,OAAQ,CACNF,SAAAA,EACAG,WAAYhB,EAAcC,EAAIS,KAC9BO,SAAU,kBA5BH,SAAChB,EAAKiB,GAAN,OACrBnB,GAAgB,SAACoB,GACf,IAAMC,EAAoBD,EAAaE,QAAO,SAACC,GAAD,OAAOA,IAAMrB,KAC3D,OAAOiB,EAAc,GAAH,eAAOE,GAAP,CAA0BnB,IAAOmB,KA0BrCG,CAAetB,EAAIS,KAAMV,EAAcC,EAAIS,UAGhDT,EAAIuB,MAAMhB,KAAI,SAACiB,EAAMC,GAAP,OACb,kBAAC,EAAAZ,GAAD,CAAIJ,IAAKgB,GAAYD,OAGzB,kBAAC,EAAAnB,GAAD,CAAIU,WAAYhB,EAAcC,EAAIS,MAChC,kBAAC,EAAAI,GAAD,CAAIa,QAAS,KACX,kBAAC,EAAAC,qBAAD,KACG3B,EAAI4B,4BAWvBnC,EAAUF,UAAY,CACpBG,QAASH,IAAAA,QACPA,IAAAA,MAAgB,CACdH,MAAOG,IAAAA,KAAAA,WACPsC,UAAWtC,IAAAA,UAEbuC,WACFnC,KAAMJ,IAAAA,QACJA,IAAAA,MAAgB,CACdkB,IAAKlB,IAAAA,OAAAA,WACLgC,MAAOhC,IAAAA,QAAkBA,IAAAA,MAAgBuC,WACzCF,kBAAmBrC,IAAAA,QAErBuC,YAGJ,U,olXC3EO,I,UCWP,QAdoB,WAClB,OACE,kBAACC,EAAA,EAAD,CACEC,WAAY,CACVC,YAAY,EACZC,UAAW,GACXC,KAAM,EACNC,QAAS,GACTC,OAAQ,qB,aCPVC,EAAmB,SAAC,GAAiC,IAA/BH,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASF,EAAgB,EAAhBA,UACzC,OACE,kBAAC,EAAAK,WAAD,CACEJ,KAAMA,EACND,UAAWA,EACXE,QAASA,EACTjC,QAASqC,EAAAA,kBAAAA,OACTH,OAAO,oBACPJ,WAA0B,IAAdC,KAKlBI,EAAiB/C,UAAY,CAC3B4C,KAAM5C,IAAAA,OACN6C,QAAS7C,IAAAA,OACT2C,UAAW3C,IAAAA,QAGb,UCgBA,EA3BiB,WACf,IAAMkD,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,KAAY,qBAAGC,aAAgCF,QAE5D,GAAgC/C,EAAAA,EAAAA,WAAS,GAAzC,eAAOkD,EAAP,KAAkBC,EAAlB,KASA,OAPAC,EAAAA,EAAAA,YAAU,WAERC,YAAW,kBAAMF,GAAW,KAAQ,KAEpCN,ECnB0C,CAC5CS,KAAMC,EAAAA,GACNC,KAAM,CACJC,UAAW,IAAIC,MAEjBC,QAAS,kBJDFC,OGgBJ,IAEIV,EACL,kBAAC,IAAD,CAAeW,QAASC,EAAAA,GAAAA,OAA+BC,QAAS,KAEhE,kBAAC,EAAA7E,SAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEY,QAASgE,EAAAA,GACT/D,KAAMgD,EAAKpC,KAAI,SAACP,GAAD,OAAS4D,EAAAA,EAAAA,IAAsB5D,QAEhD,kBAAC,EAAD,CAAkBmC,KAAM,EAAGC,QAAS,GAAIF,UAAW,Q,iHE5B5C2B,EAAmB,CAC9BC,SAAU,CACRC,MAAO,WACPC,UAAW,sCACXC,UAAW,sCACXC,eAAe,GAEjBC,UAAW,CACTJ,MAAO,YACPC,UAAW,wCACXC,UAAW,wCACXC,eAAe,GAEjBE,SAAU,CACRL,MAAO,WACPC,UAAW,uCACXC,UAAW,uCACXC,eAAe,GAEjBG,IAAK,CACHN,MAAO,MACPC,UAAW,+BACXC,UAAW,uCACXC,eAAe,GAEjBI,QAAS,CACPP,MAAO,YAIEL,EAAyB,CACpC,CACEtE,MAAO,UAET,CACEA,MAAO,gBAET,CACEA,MAAO,YAET,CACEA,MAAO,mBAET,CACEA,MAAO,oBAET,CACEA,MAAO,mBAIEwE,EAAwB,SAAC5D,GAAD,MAAU,CAC7CS,IAAKT,EAAIuE,SACThD,MAAO,CACL,kBAAC,EAAArC,KAAD,CAAMC,GAAI,SAAWa,EAAIuE,SAAU9D,IAAKT,EAAIuE,UACzCvE,EAAIuE,WAEPC,EAAAA,EAAAA,IAAYxE,EAAIyE,cAChB,kBAAC,IAAD,CAAQC,UAAQ,EAACC,OAAQ3E,EAAI4E,SAAUnE,IAAKT,EAAIuE,YAChDM,EAAAA,EAAAA,GAAe7E,EAAI8E,YAAa9E,EAAI+E,aAAa,GACjD,kBAAC,EAAA7F,KAAD,CAAMC,GAAI,SAAWa,EAAIuE,SAAU9D,IAAKT,EAAIuE,UACzCvE,EAAIgF,kBAEPhF,EAAIiF,gBAENrD,kBAAmB5B,EAAIkF","sources":["webpack:///./src/Components/SmartComponents/ClusterDetailPage.js","webpack:///./src/Components/SmartComponents/BaseTable.js","webpack:///./src/Temp/mockAPI.js","webpack:///./src/Components/SmartComponents/BaseToolbar.js","webpack:///./src/Components/PresentationalComponents/BottomPagination.js","webpack:///./src/Components/SmartComponents/CveTable.js","webpack:///./src/Store/Actions.js","webpack:///./src/Helpers/constants.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport CveTable from './CveTable';\nimport PropTypes from 'prop-types';\nimport { Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nconst ClusterDetailPage = ({ match }) => {\n  return (\n    <Fragment>\n      <PageHeader>\n        <Breadcrumb className=\"pf-u-mb-md\">\n          <BreadcrumbItem>\n            <Link to=\"/\">Vulnerability</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>\n            <Link to=\"/clusters\">Clusters</Link>\n          </BreadcrumbItem>\n          <BreadcrumbItem>rhel-9.0</BreadcrumbItem>\n        </Breadcrumb>\n        <PageHeaderTitle title=\"rhel-9.0\" className=\"pf-u-mb-sm\" />\n        <Fragment>\n          UUID: {match.params.clusterId}\n          <br />\n          Last seen: 31 Mar 2022 06:33 UTC\n        </Fragment>\n      </PageHeader>\n      <Main>\n        <CveTable />\n      </Main>\n    </Fragment>\n  );\n};\n\nClusterDetailPage.propTypes = {\n  match: PropTypes.object,\n};\n\nexport default ClusterDetailPage;\n","import React, { Fragment, useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ExpandableRowContent,\n} from '@patternfly/react-table';\n\nconst BaseTable = ({ columns, rows }) => {\n  const [expandedRows, setExpandedRows] = useState([]);\n\n  const setRowExpanded = (row, isExpanding) =>\n    setExpandedRows((prevExpanded) => {\n      const otherExpandedRows = prevExpanded.filter((r) => r !== row);\n      return isExpanding ? [...otherExpandedRows, row] : otherExpandedRows;\n    });\n\n  const isRowExpanded = (row) => expandedRows.includes(row);\n\n  return (\n    <TableComposable variant=\"compact\">\n      <Thead>\n        <Tr>\n          <Th /> {/* expandible caret column */}\n          {columns.map((column) => (\n            <Th key={column.title} sort>\n              {column.title}\n            </Th>\n          ))}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {rows.map((row, rowIndex) => (\n          <Fragment key={rowIndex}>\n            <Tr>\n              <Td\n                expand={{\n                  rowIndex,\n                  isExpanded: isRowExpanded(row.key),\n                  onToggle: () =>\n                    setRowExpanded(row.key, !isRowExpanded(row.key)),\n                }}\n              />\n              {row.cells.map((cell, cellIndex) => (\n                <Td key={cellIndex}>{cell}</Td>\n              ))}\n            </Tr>\n            <Tr isExpanded={isRowExpanded(row.key)}>\n              <Td colspan={100}>\n                <ExpandableRowContent>\n                  {row.expandableContent}\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Fragment>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nBaseTable.propTypes = {\n  columns: propTypes.arrayOf(\n    propTypes.shape({\n      title: propTypes.node.isRequired,\n      sortParam: propTypes.string,\n    })\n  ).isRequired,\n  rows: propTypes.arrayOf(\n    propTypes.shape({\n      key: propTypes.string.isRequired,\n      cells: propTypes.arrayOf(propTypes.node).isRequired,\n      expandableContent: propTypes.node,\n    })\n  ).isRequired,\n};\n\nexport default BaseTable;\n","// This is a temporary file with JSON API mocks.\n// Delete this file along with mockEndpoints/ folder\n// API endpoints have been implemented properly.\n\nimport CVES from './mockEndpoints/cves.json';\n\nexport const fetchCves = () => {\n  return CVES;\n};\n","import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport React from 'react';\n\nconst BaseToolbar = () => {\n  return (\n    <PrimaryToolbar\n      pagination={{\n        isDisabled: false,\n        itemCount: 20,\n        page: 1,\n        perPage: 20,\n        ouiaId: 'pagination-top',\n      }}\n    />\n  );\n};\n\nexport default BaseToolbar;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\n\nconst BottomPagination = ({ page, perPage, itemCount }) => {\n  return (\n    <Pagination\n      page={page}\n      itemCount={itemCount}\n      perPage={perPage}\n      variant={PaginationVariant.bottom}\n      ouiaId=\"pagination-bottom\"\n      isDisabled={itemCount === 0}\n    />\n  );\n};\n\nBottomPagination.propTypes = {\n  page: propTypes.number,\n  perPage: propTypes.number,\n  itemCount: propTypes.number,\n};\n\nexport default BottomPagination;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport BaseTable from './BaseTable';\nimport {\n  CVE_LIST_TABLE_COLUMNS,\n  CVE_LIST_TABLE_MAPPER,\n} from '../../Helpers/constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCveListTable } from '../../Store/Actions';\nimport BaseToolbar from './BaseToolbar';\nimport BottomPagination from '../PresentationalComponents/BottomPagination';\n\nconst CveTable = () => {\n  const dispatch = useDispatch();\n  const cves = useSelector(({ CveListStore }) => CveListStore.cves);\n\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // API response delay simulation\n    setTimeout(() => setLoading(false), 1000);\n\n    dispatch(fetchCveListTable());\n  }, []);\n\n  return isLoading ? (\n    <SkeletonTable colSize={CVE_LIST_TABLE_COLUMNS.length} rowSize={20} />\n  ) : (\n    <Fragment>\n      <BaseToolbar />\n      <BaseTable\n        columns={CVE_LIST_TABLE_COLUMNS}\n        rows={cves.map((row) => CVE_LIST_TABLE_MAPPER(row))}\n      />\n      <BottomPagination page={1} perPage={20} itemCount={20} />\n    </Fragment>\n  );\n};\n\nexport default CveTable;\n","import * as ActionTypes from '../Store/ActionTypes';\nimport { fetchCves } from '../Temp/mockAPI';\n\nexport const fetchCveListTable = (params) => ({\n  type: ActionTypes.FETCH_CVE_LIST_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => fetchCves(params),\n});\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\n\nexport const SEVERITY_OPTIONS = {\n  critical: {\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    isInShieldSet: true,\n  },\n  important: {\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    isInShieldSet: true,\n  },\n  moderate: {\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    isInShieldSet: true,\n  },\n  low: {\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    isInShieldSet: true,\n  },\n  unknown: {\n    label: 'Unknown',\n  },\n};\n\nexport const CVE_LIST_TABLE_COLUMNS = [\n  {\n    title: 'CVE ID',\n  },\n  {\n    title: 'Publish date',\n  },\n  {\n    title: 'Severity',\n  },\n  {\n    title: 'CVSS base score',\n  },\n  {\n    title: 'Clusters exposed',\n  },\n  {\n    title: 'Images exposed',\n  },\n];\n\nexport const CVE_LIST_TABLE_MAPPER = (row) => ({\n  key: row.synopsis,\n  cells: [\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.synopsis}\n    </Link>,\n    processDate(row.publish_date),\n    <Shield hasLabel impact={row.severity} key={row.synopsis} />,\n    parseCvssScore(row.cvss2_score, row.cvss3_score, true),\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.clusters_exposed}\n    </Link>,\n    row.images_exposed,\n  ],\n  expandableContent: row.description,\n});\n"],"names":["ClusterDetailPage","match","Fragment","Breadcrumb","className","BreadcrumbItem","Link","to","title","params","clusterId","propTypes","PropTypes","BaseTable","columns","rows","useState","expandedRows","setExpandedRows","isRowExpanded","row","includes","TableComposable","variant","Thead","Tr","Th","map","column","key","sort","Tbody","rowIndex","Td","expand","isExpanded","onToggle","isExpanding","prevExpanded","otherExpandedRows","filter","r","setRowExpanded","cells","cell","cellIndex","colspan","ExpandableRowContent","expandableContent","sortParam","isRequired","PrimaryToolbar","pagination","isDisabled","itemCount","page","perPage","ouiaId","BottomPagination","Pagination","PaginationVariant","dispatch","useDispatch","cves","useSelector","CveListStore","isLoading","setLoading","useEffect","setTimeout","type","ActionTypes","meta","timestamp","Date","payload","CVES","colSize","CVE_LIST_TABLE_COLUMNS","rowSize","CVE_LIST_TABLE_MAPPER","SEVERITY_OPTIONS","critical","label","iconColor","textColor","isInShieldSet","important","moderate","low","unknown","synopsis","processDate","publish_date","hasLabel","impact","severity","parseCvssScore","cvss2_score","cvss3_score","clusters_exposed","images_exposed","description"],"sourceRoot":""}