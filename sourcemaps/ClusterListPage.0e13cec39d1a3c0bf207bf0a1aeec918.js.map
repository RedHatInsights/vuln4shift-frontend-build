{"version":3,"file":"js/ClusterListPage.1655915274069.6ed4fa65609e491183af.js","mappings":"ySAwCA,QA7B2B,WACzB,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAAkCC,EAAAA,EAAAA,KAChC,qBAAGC,oBADGC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,YAIlB,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAkBC,EAAlB,KAUA,OARAC,EAAAA,EAAAA,YAAU,WAERC,YAAW,WACTV,GAASW,EAAAA,EAAAA,OACTH,GAAW,KACV,OACF,IAGD,kBAAC,EAAAI,SAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,KAAM,EAAGC,QAAS,GAAIC,UAAWX,IAC9C,kBAACY,EAAA,EAAD,CACEV,UAAWA,EACXW,QAASC,EAAAA,GACTC,KAAMhB,EAASiB,KAAI,SAACC,GAAD,OAASC,EAAAA,EAAAA,IAA0BD,QAExD,kBAACE,EAAA,EAAD,CAAkBV,KAAM,EAAGC,QAAS,GAAIC,UAAWX,M,cCUzD,QA9BwB,WACtB,OAA2DoB,EAAAA,EAAAA,GACzDC,EAAAA,IADF,eAAOC,EAAP,KAAgCC,EAAhC,KAIA,OACE,kBAAC,EAAAhB,SAAD,KACE,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAiBC,MAAM,sBAAsBC,UAAU,gBACrDL,GACA,kBAAC,EAAAM,MAAD,CACEC,QAASC,EAAAA,aAAAA,KACTC,UAAQ,EACRJ,UAAU,aACVD,MAAM,4DACNM,YACE,kBAAC,EAAAC,uBAAD,CACEC,QAAS,kBAAMX,GAAwB,SAMjD,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAD,U,uDCrCKhB,EAAkB,SAACiB,GAC9B,OAAwCpC,EAAAA,EAAAA,UAASqC,aAAaC,QAAQF,IAAtE,eAAOG,EAAP,KAAqBC,EAArB,KAOA,MAAO,CAACD,EALS,SAACE,GAChBD,EAAgBC,GAChBJ,aAAaK,QAAQN,EAAKK","sources":["webpack:///./src/Components/SmartComponents/ClusterList/ClusterListTable.js","webpack:///./src/Components/SmartComponents/ClusterList/ClusterListPage.js","webpack:///./src/Helpers/hooks.js"],"sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport BaseTable from '../BaseTable';\nimport {\n  CLUSTER_LIST_TABLE_COLUMNS,\n  CLUSTER_LIST_TABLE_MAPPER,\n} from '../../../Helpers/constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchClusterListTable } from '../../../Store/Actions';\nimport BaseToolbar from '../BaseToolbar';\nimport BottomPagination from '../../PresentationalComponents/BottomPagination';\n\nconst ClusterDetailTable = () => {\n  const dispatch = useDispatch();\n  const { clusters, total_items } = useSelector(\n    ({ ClusterListStore }) => ClusterListStore\n  );\n\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // API response delay simulation\n    setTimeout(() => {\n      dispatch(fetchClusterListTable());\n      setLoading(false);\n    }, 2000);\n  }, []);\n\n  return (\n    <Fragment>\n      <BaseToolbar page={1} perPage={20} itemCount={total_items} />\n      <BaseTable\n        isLoading={isLoading}\n        columns={CLUSTER_LIST_TABLE_COLUMNS}\n        rows={clusters.map((row) => CLUSTER_LIST_TABLE_MAPPER(row))}\n      />\n      <BottomPagination page={1} perPage={20} itemCount={total_items} />\n    </Fragment>\n  );\n};\n\nexport default ClusterDetailTable;\n","import React, { Fragment } from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ClusterListTable from './ClusterListTable';\nimport { HEADER_ALERT_DISMISSED_KEY } from '../../../Helpers/constants';\nimport { useLocalStorage } from '../../../Helpers/hooks';\n\nconst ClusterListPage = () => {\n  const [wasHeaderAlertDismissed, setHeaderAlertDismissed] = useLocalStorage(\n    HEADER_ALERT_DISMISSED_KEY\n  );\n\n  return (\n    <Fragment>\n      <PageHeader>\n        <PageHeaderTitle title=\"Vulnerable clusters\" className=\"pf-u-mb-sm\" />\n        {!wasHeaderAlertDismissed && (\n          <Alert\n            variant={AlertVariant.info}\n            isInline\n            className=\"pf-u-mt-md\"\n            title=\"Vulnerability information applies to OCP4.8+ version only\"\n            actionClose={\n              <AlertActionCloseButton\n                onClose={() => setHeaderAlertDismissed(true)}\n              />\n            }\n          />\n        )}\n      </PageHeader>\n      <Main>\n        <ClusterListTable />\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default ClusterListPage;\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key) => {\n  const [sessionValue, setSessionValue] = useState(localStorage.getItem(key));\n\n  const setValue = (newValue) => {\n    setSessionValue(newValue);\n    localStorage.setItem(key, newValue);\n  };\n\n  return [sessionValue, setValue];\n};\n"],"names":["dispatch","useDispatch","useSelector","ClusterListStore","clusters","total_items","useState","isLoading","setLoading","useEffect","setTimeout","fetchClusterListTable","Fragment","BaseToolbar","page","perPage","itemCount","BaseTable","columns","CLUSTER_LIST_TABLE_COLUMNS","rows","map","row","CLUSTER_LIST_TABLE_MAPPER","BottomPagination","useLocalStorage","HEADER_ALERT_DISMISSED_KEY","wasHeaderAlertDismissed","setHeaderAlertDismissed","PageHeader","PageHeaderTitle","title","className","Alert","variant","AlertVariant","isInline","actionClose","AlertActionCloseButton","onClose","Main","ClusterListTable","key","localStorage","getItem","sessionValue","setSessionValue","newValue","setItem"],"sourceRoot":""}