{"version":3,"file":"js/ClusterListPage.1656000466775.3600d2c8ad57bbe5988a.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/js/icons/plus-circle-icon.js","webpack:///./src/Components/PresentationalComponents/BottomPagination.js","webpack:///./src/Components/PresentationalComponents/EmptyStates/NoClusters.js","webpack:///./src/Components/SmartComponents/BaseTable.js","webpack:///./src/Components/SmartComponents/BaseToolbar.js","webpack:///./src/Components/SmartComponents/ClusterList/ClusterListTable.js","webpack:///./src/Components/SmartComponents/ClusterList/ClusterListPage.js","webpack:///./src/Components/PresentationalComponents/ShieldSet.js","webpack:///./src/Helpers/constants.js","webpack:///./src/Helpers/hooks.js","webpack:///./src/Helpers/apiHelper.js","webpack:///./src/Store/Actions.js"],"sourcesContent":["\"use strict\"\nexports.__esModule = true;\nexports.PlusCircleIconConfig = {\n  name: 'PlusCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.PlusCircleIcon = require('../createIcon').createIcon(exports.PlusCircleIconConfig);\nexports[\"default\"] = exports.PlusCircleIcon;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\n\nconst BottomPagination = ({ page, perPage, itemCount }) => {\n  return (\n    <Pagination\n      page={page}\n      itemCount={itemCount}\n      perPage={perPage}\n      variant={PaginationVariant.bottom}\n      ouiaId=\"pagination-bottom\"\n      isDisabled={itemCount === 0}\n    />\n  );\n};\n\nBottomPagination.propTypes = {\n  page: propTypes.number,\n  perPage: propTypes.number,\n  itemCount: propTypes.number,\n};\n\nexport default BottomPagination;\n","import React from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Button,\n  Bullseye,\n  Title,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\n\nconst NoClusters = () => (\n  <Bullseye>\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon icon={PlusCircleIcon} size=\"sm\" />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        No clusters yet\n      </Title>\n      <EmptyStateBody>\n        To get started, create or register your cluster to get information from\n        Insights Vulnerability.\n      </EmptyStateBody>\n      <Button\n        variant=\"primary\"\n        component=\"a\"\n        href=\"https://console.redhat.com/openshift/create/\"\n        target=\"_blank\"\n      >\n        Create Cluster\n      </Button>\n      <br />\n      <Button\n        variant=\"link\"\n        component=\"a\"\n        href=\"https://console.redhat.com/openshift/register/\"\n        target=\"_blank\"\n        className=\"pf-u-mt-md\"\n      >\n        Register Cluster\n      </Button>\n    </EmptyState>\n  </Bullseye>\n);\n\nexport default NoClusters;\n","import React, { Fragment, useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ExpandableRowContent,\n} from '@patternfly/react-table';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport { TableVariant } from '@patternfly/react-table';\n\nconst BaseTable = ({\n  isLoading,\n  columns,\n  rows,\n  isExpandable = false,\n  emptyState,\n}) => {\n  const [expandedRows, setExpandedRows] = useState([]);\n\n  const setRowExpanded = (row, isExpanding) =>\n    setExpandedRows((prevExpanded) => {\n      const otherExpandedRows = prevExpanded.filter((r) => r !== row);\n      return isExpanding ? [...otherExpandedRows, row] : otherExpandedRows;\n    });\n\n  const isRowExpanded = (row) => expandedRows.includes(row);\n\n  return isLoading ? (\n    <SkeletonTable\n      colSize={columns.length}\n      rowSize={20}\n      variant={TableVariant.compact}\n    />\n  ) : (\n    <TableComposable variant={TableVariant.compact}>\n      <Thead>\n        <Tr>\n          {isExpandable && <Th />}\n          {columns.map((column) => (\n            <Th key={column.title} sort={column.sortParam}>\n              {column.title}\n            </Th>\n          ))}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {rows.length === 0 ? (\n          <Tr>\n            <Td colSpan={100}>{emptyState}</Td>\n          </Tr>\n        ) : (\n          rows.map((row, rowIndex) => (\n            <Fragment key={rowIndex}>\n              <Tr>\n                {isExpandable && (\n                  <Td\n                    expand={{\n                      rowIndex,\n                      isExpanded: isRowExpanded(row.key),\n                      onToggle: () =>\n                        setRowExpanded(row.key, !isRowExpanded(row.key)),\n                    }}\n                  />\n                )}\n                {row.cells.map((cell, cellIndex) => (\n                  <Td key={cellIndex} dataLabel={columns[cellIndex].title}>\n                    {cell}\n                  </Td>\n                ))}\n              </Tr>\n              {isExpandable && (\n                <Tr isExpanded={isRowExpanded(row.key)}>\n                  <Td colspan={100}>\n                    <ExpandableRowContent>\n                      {row.expandableContent}\n                    </ExpandableRowContent>\n                  </Td>\n                </Tr>\n              )}\n            </Fragment>\n          ))\n        )}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nBaseTable.propTypes = {\n  isLoading: propTypes.bool.isRequired,\n  columns: propTypes.arrayOf(\n    propTypes.shape({\n      title: propTypes.node.isRequired,\n      sortParam: propTypes.string,\n    })\n  ).isRequired,\n  rows: propTypes.arrayOf(\n    propTypes.shape({\n      key: propTypes.string.isRequired,\n      cells: propTypes.arrayOf(propTypes.node).isRequired,\n      expandableContent: propTypes.node,\n    })\n  ).isRequired,\n  isExpandable: propTypes.bool,\n  emptyState: propTypes.node.isRequired,\n};\n\nexport default BaseTable;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\n\nconst BaseToolbar = ({ page = 1, perPage = 20, itemCount }) => {\n  return (\n    <PrimaryToolbar\n      pagination={{\n        isDisabled: itemCount === 0,\n        itemCount,\n        page,\n        perPage,\n        ouiaId: 'pagination-top',\n      }}\n    />\n  );\n};\n\nBaseToolbar.propTypes = {\n  page: propTypes.number,\n  perPage: propTypes.number,\n  itemCount: propTypes.number,\n};\n\nexport default BaseToolbar;\n","import React, { Fragment, useEffect } from 'react';\nimport BaseTable from '../BaseTable';\nimport {\n  CLUSTER_LIST_TABLE_COLUMNS,\n  CLUSTER_LIST_TABLE_MAPPER,\n} from '../../../Helpers/constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchClusterListTable } from '../../../Store/Actions';\nimport BaseToolbar from '../BaseToolbar';\nimport BottomPagination from '../../PresentationalComponents/BottomPagination';\nimport NoClusters from '../../PresentationalComponents/EmptyStates/NoClusters';\n\nconst ClusterDetailTable = () => {\n  const dispatch = useDispatch();\n  const { clusters, total_items, isLoading } = useSelector(\n    ({ ClusterListStore }) => ClusterListStore\n  );\n\n  useEffect(() => {\n    dispatch(fetchClusterListTable());\n  }, []);\n\n  return (\n    <Fragment>\n      <BaseToolbar page={1} perPage={20} itemCount={total_items} />\n      <BaseTable\n        isLoading={isLoading}\n        columns={CLUSTER_LIST_TABLE_COLUMNS}\n        rows={clusters.map((row) => CLUSTER_LIST_TABLE_MAPPER(row))}\n        emptyState={<NoClusters />}\n      />\n      <BottomPagination page={1} perPage={20} itemCount={total_items} />\n    </Fragment>\n  );\n};\n\nexport default ClusterDetailTable;\n","import React, { Fragment } from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  AlertVariant,\n} from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport ClusterListTable from './ClusterListTable';\nimport { HEADER_ALERT_DISMISSED_KEY } from '../../../Helpers/constants';\nimport { useLocalStorage } from '../../../Helpers/hooks';\n\nconst ClusterListPage = () => {\n  const [wasHeaderAlertDismissed, setHeaderAlertDismissed] = useLocalStorage(\n    HEADER_ALERT_DISMISSED_KEY\n  );\n\n  return (\n    <Fragment>\n      <PageHeader>\n        <PageHeaderTitle title=\"Vulnerable clusters\" className=\"pf-u-mb-sm\" />\n        {!wasHeaderAlertDismissed && (\n          <Alert\n            variant={AlertVariant.info}\n            isInline\n            className=\"pf-u-mt-md\"\n            title=\"Vulnerability information applies to OCP4.8+ version only\"\n            actionClose={\n              <AlertActionCloseButton\n                onClose={() => setHeaderAlertDismissed(true)}\n              />\n            }\n          />\n        )}\n      </PageHeader>\n      <Main>\n        <ClusterListTable />\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default ClusterListPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { SEVERITY_OPTIONS } from '../../Helpers/constants';\nimport { SecurityIcon } from '@patternfly/react-icons';\nimport { Link } from 'react-router-dom';\nimport { Tooltip } from '@patternfly/react-core';\n\n// TODO: Setup link to navigate to Cluster detail page with severity filter applied\nconst ShieldSet = ({ count, linkTo }) => {\n  const DISABLED_COLOR = 'var(--pf-global--disabled-color--200)';\n\n  return (\n    <div className=\"shield-set\">\n      {Object.entries(SEVERITY_OPTIONS).map(\n        ([severityOption, severityOptionDetails]) => (\n          <Tooltip\n            key={severityOption}\n            content={`${severityOptionDetails.label} severity`}\n          >\n            {severityOptionDetails.isInShieldSet &&\n              (count[severityOption] === 0 ? (\n                <Link className=\"disabled-shield\">\n                  <SecurityIcon style={{ color: DISABLED_COLOR }} />\n                  <span>0</span>\n                </Link>\n              ) : (\n                <Link key={severityOption} to={linkTo}>\n                  <SecurityIcon\n                    style={{ color: severityOptionDetails.iconColor }}\n                  />\n                  <span>{count[severityOption]}</span>\n                </Link>\n              ))}\n          </Tooltip>\n        )\n      )}\n    </div>\n  );\n};\n\nShieldSet.propTypes = {\n  count: PropTypes.shape({\n    critical: PropTypes.number,\n    important: PropTypes.number,\n    moderate: PropTypes.number,\n    low: PropTypes.number,\n  }).isRequired,\n  linkTo: PropTypes.string,\n};\n\nexport default ShieldSet;\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\nimport ShieldSet from '../Components/PresentationalComponents/ShieldSet';\nimport { Text, TextContent, TextVariants } from '@patternfly/react-core';\n\nexport const HEADER_ALERT_DISMISSED_KEY = 'vuln4shift:header-alert-dismissed';\n\nexport const SEVERITY_OPTIONS = {\n  critical: {\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    isInShieldSet: true,\n  },\n  important: {\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    isInShieldSet: true,\n  },\n  moderate: {\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    isInShieldSet: true,\n  },\n  low: {\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    isInShieldSet: true,\n  },\n  unknown: {\n    label: 'Unknown',\n  },\n};\n\nexport const CVE_LIST_TABLE_COLUMNS = [\n  {\n    title: 'CVE ID',\n    sortParam: 'synopsis',\n  },\n  {\n    title: 'Publish date',\n    sortParam: 'publish_date',\n  },\n  {\n    title: 'Severity',\n    sortParam: 'severity',\n  },\n  {\n    title: 'CVSS base score',\n    sortParam: 'cvss_score',\n  },\n  {\n    title: 'Clusters exposed',\n    sortParam: 'clusters_exposed',\n  },\n  {\n    title: 'Images exposed',\n    sortParam: 'images_exposed',\n  },\n];\n\nexport const CLUSTER_LIST_TABLE_COLUMNS = [\n  {\n    title: 'Name',\n    sortParam: 'display_name',\n  },\n  {\n    title: 'Status',\n  },\n  {\n    title: 'Type',\n  },\n  {\n    title: 'Version',\n  },\n  {\n    title: 'CVEs severity',\n  },\n  {\n    title: 'Provider',\n    sortParam: 'provider',\n  },\n];\n\nexport const CVE_DETAIL_TABLE_COLUMNS = [\n  {\n    title: 'Name',\n    sortParam: 'display_name',\n  },\n  {\n    title: 'Status',\n  },\n  {\n    title: 'Type',\n  },\n  {\n    title: 'Version',\n  },\n  {\n    title: 'Provider',\n    sortParam: 'provider',\n  },\n];\n\nexport const CLUSTER_DETAIL_TABLE_COLUMNS = [\n  {\n    title: 'CVE ID',\n    sortParam: 'synopsis',\n  },\n  {\n    title: 'Publish date',\n    sortParam: 'publish_date',\n  },\n  {\n    title: 'Severity',\n    sortParam: 'severity',\n  },\n  {\n    title: 'CVSS base score',\n    sortParam: 'cvss_score',\n  },\n  {\n    title: 'Images exposed',\n    sortParam: 'images_exposed',\n  },\n];\n\nconst createCveDescription = (row) => (\n  <Fragment>\n    <TextContent>\n      <Text component={TextVariants.h6} style={{ fontSize: 14 }}>\n        CVE description\n      </Text>\n    </TextContent>\n    {row.description}\n    <Link\n      to={'/cves/' + row.synopsis}\n      className=\"pf-u-mt-md pf-u-display-block\"\n    >\n      View more information about this CVE\n    </Link>\n  </Fragment>\n);\n\nexport const CVE_LIST_TABLE_MAPPER = (row) => ({\n  key: row.synopsis,\n  cells: [\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.synopsis}\n    </Link>,\n    processDate(row.publish_date),\n    <Shield hasLabel impact={row.severity} key={row.synopsis} />,\n    parseCvssScore(row.cvss2_score, row.cvss3_score, true),\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.clusters_exposed}\n    </Link>,\n    row.images_exposed,\n  ],\n  expandableContent: createCveDescription(row),\n});\n\nexport const CLUSTER_LIST_TABLE_MAPPER = (row) => ({\n  key: row.id,\n  cells: [\n    <Link to={'/clusters/' + row.id} key={row.id}>\n      {row.display_name}\n    </Link>,\n    row.status_text,\n    row.type,\n    row.version,\n    <ShieldSet\n      key={row.id}\n      count={{ ...row.cves_severity }}\n      linkTo={`/clusters/${row.id}`}\n    />,\n    row.provider,\n  ],\n});\n\nexport const CVE_DETAIL_TABLE_MAPPER = (row) => ({\n  key: row.id,\n  cells: [\n    <Link to={'/clusters/' + row.id} key={row.id}>\n      {row.display_name}\n    </Link>,\n    row.status_text,\n    row.type,\n    row.version,\n    row.provider,\n  ],\n});\n\nexport const CLUSTER_DETAIL_TABLE_MAPPER = (row) => ({\n  key: row.synopsis,\n  cells: [\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.synopsis}\n    </Link>,\n    processDate(row.publish_date),\n    <Shield hasLabel impact={row.severity} key={row.synopsis} />,\n    parseCvssScore(row.cvss2_score, row.cvss3_score, true),\n    row.images_exposed,\n  ],\n  expandableContent: createCveDescription(row),\n});\n","import { useState } from 'react';\n\nexport const useLocalStorage = (key) => {\n  const [sessionValue, setSessionValue] = useState(localStorage.getItem(key));\n\n  const setValue = (newValue) => {\n    setSessionValue(newValue);\n    localStorage.setItem(key, newValue);\n  };\n\n  return [sessionValue, setValue];\n};\n","import axios from 'axios';\n\nexport const fetchCves = async (params) => {\n  return axios.get('/api/ocp-vulnerability/v1/cves', { params });\n};\n\nexport const fetchClusters = async (params) => {\n  return axios.get('/api/ocp-vulnerability/v1/clusters', { params });\n};\n\nexport const fetchExposedClusters = async (cveId, params) => {\n  return axios.get(`/api/ocp-vulnerability/v1/cves/${cveId}/exposed_clusters`, {\n    params,\n  });\n};\n\nexport const fetchCveDetails = async (cveId, params) => {\n  return axios.get(`/api/ocp-vulnerability/v1/cves/${cveId}`, {\n    params,\n  });\n};\n\nexport const fetchClusterCves = async (clusterId, params) => {\n  return axios.get(`/api/ocp-vulnerability/v1/clusters/${clusterId}/cves`, {\n    params,\n  });\n};\n\nexport const fetchClusterDetails = async (clusterId, params) => {\n  return axios.get(`/api/ocp-vulnerability/v1/clusters/${clusterId}`, {\n    params,\n  });\n};\n","import * as ActionTypes from '../Store/ActionTypes';\nimport * as api from '../Helpers/apiHelper';\n\nexport const fetchCveListTable = (params) => ({\n  type: ActionTypes.FETCH_CVE_LIST_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => api.fetchCves(params),\n});\n\nexport const fetchClusterListTable = (params) => ({\n  type: ActionTypes.FETCH_CLUSTER_LIST_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => api.fetchClusters(params),\n});\n\nexport const fetchCveDetailTable = (cveId, params) => ({\n  type: ActionTypes.FETCH_CVE_DETAIL_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => api.fetchExposedClusters(cveId, params),\n});\n\nexport const fetchCveDetails = (cveId, params) => ({\n  type: ActionTypes.FETCH_CVE_DETAILS,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => api.fetchCveDetails(cveId, params),\n});\n\nexport const fetchClusterDetailTable = (clusterId, params) => ({\n  type: ActionTypes.FETCH_CLUSTER_DETAIL_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => api.fetchClusterCves(clusterId, params),\n});\n\nexport const fetchClusterDetails = (clusterId, params) => ({\n  type: ActionTypes.FETCH_CLUSTER_DETAILS,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => api.fetchClusterDetails(clusterId, params),\n});\n"],"names":["exports","name","height","width","svgPath","yOffset","xOffset","BottomPagination","page","perPage","itemCount","Pagination","variant","PaginationVariant","ouiaId","isDisabled","propTypes","Bullseye","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","PlusCircleIcon","size","Title","headingLevel","EmptyStateBody","Button","component","href","target","className","BaseTable","isLoading","columns","rows","isExpandable","emptyState","useState","expandedRows","setExpandedRows","isRowExpanded","row","includes","colSize","length","rowSize","TableVariant","TableComposable","Thead","Tr","Th","map","column","key","title","sort","sortParam","Tbody","Td","colSpan","rowIndex","Fragment","expand","isExpanded","onToggle","isExpanding","prevExpanded","otherExpandedRows","filter","r","setRowExpanded","cells","cell","cellIndex","dataLabel","colspan","ExpandableRowContent","expandableContent","isRequired","BaseToolbar","pagination","dispatch","useDispatch","useSelector","ClusterListStore","clusters","total_items","useEffect","fetchClusterListTable","CLUSTER_LIST_TABLE_COLUMNS","CLUSTER_LIST_TABLE_MAPPER","NoClusters","useLocalStorage","HEADER_ALERT_DISMISSED_KEY","wasHeaderAlertDismissed","setHeaderAlertDismissed","PageHeader","PageHeaderTitle","Alert","AlertVariant","isInline","actionClose","AlertActionCloseButton","onClose","Main","ClusterListTable","ShieldSet","count","linkTo","Object","entries","SEVERITY_OPTIONS","severityOption","severityOptionDetails","Tooltip","content","label","isInShieldSet","Link","style","color","to","iconColor","PropTypes","critical","important","moderate","low","textColor","unknown","CVE_LIST_TABLE_COLUMNS","CVE_DETAIL_TABLE_COLUMNS","CLUSTER_DETAIL_TABLE_COLUMNS","createCveDescription","TextContent","Text","TextVariants","fontSize","description","synopsis","CVE_LIST_TABLE_MAPPER","processDate","publish_date","Shield","hasLabel","impact","severity","parseCvssScore","cvss2_score","cvss3_score","clusters_exposed","images_exposed","id","display_name","status_text","type","version","cves_severity","provider","CVE_DETAIL_TABLE_MAPPER","CLUSTER_DETAIL_TABLE_MAPPER","localStorage","getItem","sessionValue","setSessionValue","newValue","setItem","fetchCves","params","axios","fetchClusters","fetchExposedClusters","cveId","fetchCveDetails","fetchClusterCves","clusterId","fetchClusterDetails","fetchCveListTable","ActionTypes","meta","timestamp","Date","payload","api","fetchCveDetailTable","fetchClusterDetailTable"],"sourceRoot":""}