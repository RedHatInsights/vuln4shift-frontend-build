{"version":3,"file":"js/CveListPage.1651604974557.bfe8faff9e32b80c4906.js","mappings":"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","sources":["webpack:///./src/Components/SmartComponents/BaseTable.js","webpack:///./src/Temp/mockAPI.js","webpack:///./src/Components/SmartComponents/BaseToolbar.js","webpack:///./src/Components/PresentationalComponents/BottomPagination.js","webpack:///./src/Components/SmartComponents/CveList/CveListTable.js","webpack:///./src/Store/Actions.js","webpack:///./src/Components/SmartComponents/CveList/CveListPage.js","webpack:///./src/Helpers/constants.js"],"sourcesContent":["import React, { Fragment, useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n  TableComposable,\n  Thead,\n  Tr,\n  Th,\n  Tbody,\n  Td,\n  ExpandableRowContent,\n} from '@patternfly/react-table';\n\nconst BaseTable = ({ columns, rows }) => {\n  const [expandedRows, setExpandedRows] = useState([]);\n\n  const setRowExpanded = (row, isExpanding) =>\n    setExpandedRows((prevExpanded) => {\n      const otherExpandedRows = prevExpanded.filter((r) => r !== row);\n      return isExpanding ? [...otherExpandedRows, row] : otherExpandedRows;\n    });\n\n  const isRowExpanded = (row) => expandedRows.includes(row);\n\n  return (\n    <TableComposable variant=\"compact\">\n      <Thead>\n        <Tr>\n          <Th /> {/* expandible caret column */}\n          {columns.map((column) => (\n            <Th key={column.title} sort>\n              {column.title}\n            </Th>\n          ))}\n        </Tr>\n      </Thead>\n      <Tbody>\n        {rows.map((row, rowIndex) => (\n          <Fragment key={rowIndex}>\n            <Tr>\n              <Td\n                expand={{\n                  rowIndex,\n                  isExpanded: isRowExpanded(row.key),\n                  onToggle: () =>\n                    setRowExpanded(row.key, !isRowExpanded(row.key)),\n                }}\n              />\n              {row.cells.map((cell, cellIndex) => (\n                <Td key={cellIndex}>{cell}</Td>\n              ))}\n            </Tr>\n            <Tr isExpanded={isRowExpanded(row.key)}>\n              <Td colspan={100}>\n                <ExpandableRowContent>\n                  {row.expandableContent}\n                </ExpandableRowContent>\n              </Td>\n            </Tr>\n          </Fragment>\n        ))}\n      </Tbody>\n    </TableComposable>\n  );\n};\n\nBaseTable.propTypes = {\n  columns: propTypes.arrayOf(\n    propTypes.shape({\n      title: propTypes.node.isRequired,\n      sortParam: propTypes.string,\n    })\n  ).isRequired,\n  rows: propTypes.arrayOf(\n    propTypes.shape({\n      key: propTypes.string.isRequired,\n      cells: propTypes.arrayOf(propTypes.node).isRequired,\n      expandableContent: propTypes.node,\n    })\n  ).isRequired,\n};\n\nexport default BaseTable;\n","// This is a temporary file with JSON API mocks.\n// Delete this file along with mockEndpoints/ folder\n// API endpoints have been implemented properly.\n\nimport cves from './mockEndpoints/cves.json';\nimport cveDetails from './mockEndpoints/cveDetails.json';\nimport clusters from './mockEndpoints/clusters.json';\nimport clusterDetails from './mockEndpoints/clusterDetails.json';\nimport exposedClusters from './mockEndpoints/exposedClusters.json';\nimport clusterCves from './mockEndpoints/clusterCves.json';\n\nexport const fetchCves = () => {\n  return cves;\n};\n\nexport const fetchCveDetails = () => {\n  return cveDetails;\n};\n\nexport const fetchClusters = () => {\n  return clusters;\n};\n\nexport const fetchClusterDetails = () => {\n  return clusterDetails;\n};\n\nexport const fetchExposedClusters = () => {\n  return exposedClusters;\n};\n\nexport const fetchClusterCves = () => {\n  return clusterCves;\n};\n","import { PrimaryToolbar } from '@redhat-cloud-services/frontend-components/PrimaryToolbar';\nimport React from 'react';\n\nconst BaseToolbar = () => {\n  return (\n    <PrimaryToolbar\n      pagination={{\n        isDisabled: false,\n        itemCount: 20,\n        page: 1,\n        perPage: 20,\n        ouiaId: 'pagination-top',\n      }}\n    />\n  );\n};\n\nexport default BaseToolbar;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Pagination, PaginationVariant } from '@patternfly/react-core';\n\nconst BottomPagination = ({ page, perPage, itemCount }) => {\n  return (\n    <Pagination\n      page={page}\n      itemCount={itemCount}\n      perPage={perPage}\n      variant={PaginationVariant.bottom}\n      ouiaId=\"pagination-bottom\"\n      isDisabled={itemCount === 0}\n    />\n  );\n};\n\nBottomPagination.propTypes = {\n  page: propTypes.number,\n  perPage: propTypes.number,\n  itemCount: propTypes.number,\n};\n\nexport default BottomPagination;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport SkeletonTable from '@redhat-cloud-services/frontend-components/SkeletonTable/SkeletonTable';\nimport BaseTable from '../BaseTable';\nimport {\n  CVE_LIST_TABLE_COLUMNS,\n  CVE_LIST_TABLE_MAPPER,\n} from '../../../Helpers/constants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchCveListTable } from '../../../Store/Actions';\nimport BaseToolbar from '../BaseToolbar';\nimport BottomPagination from '../../PresentationalComponents/BottomPagination';\nimport { TableVariant } from '@patternfly/react-table';\n\nconst CveListTable = () => {\n  const dispatch = useDispatch();\n  const cves = useSelector(({ CveListStore }) => CveListStore.cves);\n\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // API response delay simulation\n    setTimeout(() => setLoading(false), 1000);\n\n    dispatch(fetchCveListTable());\n  }, []);\n\n  return isLoading ? (\n    <SkeletonTable\n      colSize={CVE_LIST_TABLE_COLUMNS.length}\n      rowSize={20}\n      variant={TableVariant.compact}\n    />\n  ) : (\n    <Fragment>\n      <BaseToolbar />\n      <BaseTable\n        columns={CVE_LIST_TABLE_COLUMNS}\n        rows={cves.map((row) => CVE_LIST_TABLE_MAPPER(row))}\n      />\n      <BottomPagination page={1} perPage={20} itemCount={20} />\n    </Fragment>\n  );\n};\n\nexport default CveListTable;\n","import * as ActionTypes from '../Store/ActionTypes';\nimport { fetchCves } from '../Temp/mockAPI';\n\nexport const fetchCveListTable = (params) => ({\n  type: ActionTypes.FETCH_CVE_LIST_TABLE,\n  meta: {\n    timestamp: new Date(),\n  },\n  payload: () => fetchCves(params),\n});\n","import React, { Fragment } from 'react';\nimport { Alert, AlertVariant, Popover } from '@patternfly/react-core';\nimport {\n  OutlinedQuestionCircleIcon,\n  ExternalLinkAltIcon,\n} from '@patternfly/react-icons';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport CveListTable from './CveListTable';\n\nconst CveListPage = () => {\n  // TODO: Add correct link\n  const PRODUCT_DOC = 'https://access.redhat.com/';\n\n  const HeaderTitle = (\n    <Popover\n      enableFlip\n      position=\"right\"\n      bodyContent={\n        <Fragment>\n          The Vulnerability service identifies CVEs with errata that may affect\n          your Insights-connected OpenShift clusters.\n          <br />\n          <br />\n          Vulnerability information applies for OCP4.8+ version only.\n        </Fragment>\n      }\n      footerContent={\n        <a href={PRODUCT_DOC} target=\"__blank\" rel=\"noopener noreferrer\">\n          Learn more <ExternalLinkAltIcon />\n        </a>\n      }\n    >\n      <span>\n        CVEs\n        <OutlinedQuestionCircleIcon\n          color=\"var(--pf-global--secondary-color--100)\"\n          className=\"pf-u-ml-sm pointer cves-header-questionmark\"\n          style={{ verticalAlign: '0' }}\n        />\n      </span>\n    </Popover>\n  );\n\n  // TODO: The alert should be dismissable (actionClose prop)\n  return (\n    <Fragment>\n      <PageHeader>\n        <PageHeaderTitle title={HeaderTitle} className=\"pf-u-mb-sm\" />\n        <Alert\n          variant={AlertVariant.info}\n          isInline\n          className=\"pf-u-mt-md\"\n          title=\"Vulnerability information applies to OCP4.8+ version only\"\n        />\n      </PageHeader>\n      <Main>\n        <CveListTable />\n      </Main>\n    </Fragment>\n  );\n};\n\nexport default CveListPage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { processDate } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport parseCvssScore from '@redhat-cloud-services/frontend-components-utilities/parseCvssScore';\nimport { Shield } from '@redhat-cloud-services/frontend-components/Shield';\n\nexport const SEVERITY_OPTIONS = {\n  critical: {\n    label: 'Critical',\n    iconColor: 'var(--pf-global--danger-color--100)',\n    textColor: 'var(--pf-global--danger-color--100)',\n    isInShieldSet: true,\n  },\n  important: {\n    label: 'Important',\n    iconColor: 'var(--pf-global--palette--orange-300)',\n    textColor: 'var(--pf-global--palette--orange-400)',\n    isInShieldSet: true,\n  },\n  moderate: {\n    label: 'Moderate',\n    iconColor: 'var(--pf-global--warning-color--100)',\n    textColor: 'var(--pf-global--warning-color--200)',\n    isInShieldSet: true,\n  },\n  low: {\n    label: 'Low',\n    iconColor: 'var(--pf-global--Color--200)',\n    textColor: 'var(--pf-global--default-color--300)',\n    isInShieldSet: true,\n  },\n  unknown: {\n    label: 'Unknown',\n  },\n};\n\nexport const CVE_LIST_TABLE_COLUMNS = [\n  {\n    title: 'CVE ID',\n  },\n  {\n    title: 'Publish date',\n  },\n  {\n    title: 'Severity',\n  },\n  {\n    title: 'CVSS base score',\n  },\n  {\n    title: 'Clusters exposed',\n  },\n  {\n    title: 'Images exposed',\n  },\n];\n\nexport const CVE_LIST_TABLE_MAPPER = (row) => ({\n  key: row.synopsis,\n  cells: [\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.synopsis}\n    </Link>,\n    processDate(row.publish_date),\n    <Shield hasLabel impact={row.severity} key={row.synopsis} />,\n    parseCvssScore(row.cvss2_score, row.cvss3_score, true),\n    <Link to={'/cves/' + row.synopsis} key={row.synopsis}>\n      {row.clusters_exposed}\n    </Link>,\n    row.images_exposed,\n  ],\n  expandableContent: row.description,\n});\n"],"names":["BaseTable","columns","rows","useState","expandedRows","setExpandedRows","isRowExpanded","row","includes","TableComposable","variant","Thead","Tr","Th","map","column","key","title","sort","Tbody","rowIndex","Fragment","Td","expand","isExpanded","onToggle","isExpanding","prevExpanded","otherExpandedRows","filter","r","setRowExpanded","cells","cell","cellIndex","colspan","ExpandableRowContent","expandableContent","propTypes","sortParam","isRequired","PrimaryToolbar","pagination","isDisabled","itemCount","page","perPage","ouiaId","BottomPagination","Pagination","PaginationVariant","dispatch","useDispatch","cves","useSelector","CveListStore","isLoading","setLoading","useEffect","setTimeout","type","ActionTypes","meta","timestamp","Date","payload","colSize","CVE_LIST_TABLE_COLUMNS","rowSize","TableVariant","CVE_LIST_TABLE_MAPPER","HeaderTitle","Popover","enableFlip","position","bodyContent","footerContent","href","target","rel","color","className","style","verticalAlign","PageHeader","PageHeaderTitle","Alert","AlertVariant","isInline","Main","SEVERITY_OPTIONS","critical","label","iconColor","textColor","isInShieldSet","important","moderate","low","unknown","synopsis","Link","to","processDate","publish_date","hasLabel","impact","severity","parseCvssScore","cvss2_score","cvss3_score","clusters_exposed","images_exposed","description"],"sourceRoot":""}